# 1. Создание и удаление
# Контроль создания класса через __new__
# Метод __new__ срабатывает раньше __init__ и определяет что должен вернуть
# класс в качестве себя - класса. Рассмотрим вначале общий пример.
class User:
    def __init__(self, name: str):
        self.name = name
        print(f'Создал {self.name = }')

    def __new__(cls, *args, **kwargs):
        instance = super().__new__(cls)
        print(f'Создал класс {cls}')
        return instance


print('Создаём первый раз')
u_1 = User('Спенглер')
print('Создаём второй раз')
u_2 = User('Венкман')
print('Создаём третий раз')
u_3 = User(name='Стэнц')
# Метод __new__ принимает в качестве первого параметра сам себя. Обычно
# используют слово cls — сокращение от class. Так понятно, что мы работаем с
# классом, а не с его экземпляром. Параметры *args, **kwargs нужны для правильной
# работы метода __init__ и попадания в него любых аргументов.
# Внутри __new__ необходимо вызвать аналогичный родительский метод. Он
# возвращает класс, который можно модифицировать прежде чем вернуть из метода.
