# Изменяемые и неизменяемые типы
# и их особенности
# ● Замена на новый объект того же типа
a = 5
print(a, id(a))
a += 1
print(a, id(a))

# ● Второй вариант развития событий при изменении неизменяемого — вызов
# ошибки. Строка неизменяема. Попытаемся заменить пробел
# подчеркиванием.
# txt = 'Hello world!'
# txt[5] = '_'

# Получим TypeError: 'str' object does not support item assignment т.к.
# изменить символ в неизменяемой строке нельзя. Но ведь в Python есть
# возможность такой замены.
txt = 'Hello world!'
print(txt, id(txt))
txt = txt.replace(' ', '_')
print(txt, id(txt))
# Присмотритесь к адресам. Мы создали новый объект строкового типа, который
# занимает новое место в памяти. Изменить старый не удалось.
# К строкам мы вернёмся позже на этой и следующей лекциях