# 4. Пара полезных структур данных
# И ещё одна интересная особенность namedtuple. Если все свойства являются
# объектами неизменяемого типа, экземпляр может быть ключом словаря, элементом
# множества и т.п.
from collections import namedtuple

Point = namedtuple('Point', 'x y z', defaults=[0, 0, 0])
d = {
    Point(2, 3, 4): 'first',
    Point(10, -100, -500): 'second',
    Point(3, 7, 11): 'last',
}
print(d)
mut_point = Point(2, [3, 4, 5], 6)
print(mut_point)
d.update({mut_point: 'bad_point'})  # TypeError: unhashable type:'list'
# Точка mut_point была создана и ошибки нет. namedtuple допускает изменяемые
# типы для свойств. Но такой экземпляр перестают быть хэшируемым. Как результат
# ошибка при добавлении точки в качестве ключа словаря.
# И конечно же стоит упомянуть о таком плюсе namedtuple как экономия памяти.
# Экземпляры занимают в памяти столько же, сколько и обычные кортежи.
